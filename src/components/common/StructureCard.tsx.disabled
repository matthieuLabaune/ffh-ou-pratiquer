import React from 'react';
import { StyleSheet, Text, View, TouchableOpacity } from 'react-native';
import theme from '../../config/theme';
import { DisciplineTag } from './DisciplineTag';

interface Place {
  id: string;
  name: string;
  address: string;
  city: string;
  postalCode?: string;
  region?: string;
  departement?: string;
  disciplines: string[];
  distance?: number;
}

interface StructureCardProps {
  place: Place;
  onPress: () => void;
}

import React from 'react';
import { View, StyleSheet, TouchableOpacity } from 'react-native';
import { Text, Card, Chip, IconButton } from 'react-native-paper';
import { Structure } from '@/models';
import { colors, spacing, getDisciplineColor } from '@/config/theme';

interface StructureCardProps {
  structure: Structure;
  onPress: (structure: Structure) => void;
  onFavoritePress?: (structure: Structure) => void;
}

export function StructureCard({ structure, onPress, onFavoritePress }: StructureCardProps) {
  return (
    <Card style={styles.card} onPress={() => onPress(structure)}>
      <Card.Content style={styles.content}>
        <View style={styles.header}>
          <View style={styles.titleContainer}>
            <Text variant="titleMedium" style={styles.name} numberOfLines={2}>
              {structure.name}
            </Text>
            <Text variant="bodySmall" style={styles.type}>
              {structure.type}
            </Text>
          </View>
          
          <View style={styles.rightSection}>
            {structure.distance && (
              <View style={styles.distanceContainer}>
                <Text variant="bodySmall" style={styles.distance}>
                  {structure.distance.toFixed(1)} km
                </Text>
              </View>
            )}
            {onFavoritePress && (
              <IconButton
                icon={structure.isFavorite ? 'heart' : 'heart-outline'}
                iconColor={structure.isFavorite ? colors.error : colors.textSecondary}
                size={20}
                onPress={() => onFavoritePress(structure)}
                style={styles.favoriteButton}
              />
            )}
          </View>
        </View>
        
        <View style={styles.locationRow}>
          <Text variant="bodyMedium" style={styles.address}>
            üìç {structure.address.city} ‚Ä¢ {structure.address.postalCode}
          </Text>
        </View>
        
        <View style={styles.disciplinesContainer}>
          {structure.disciplines.slice(0, 3).map((discipline, index) => (
            <Chip 
              key={index} 
              style={[
                styles.disciplineChip, 
                { backgroundColor: getDisciplineColor(discipline.name) + '20' }
              ]} 
              textStyle={[
                styles.disciplineText,
                { color: getDisciplineColor(discipline.name) }
              ]}
              compact
            >
              {discipline.name}
            </Chip>
          ))}
          {structure.disciplines.length > 3 && (
            <Chip style={styles.moreChip} textStyle={styles.moreText} compact>
              +{structure.disciplines.length - 3}
            </Chip>
          )}
        </View>

        {structure.mobilities && structure.mobilities.length > 0 && (
          <View style={styles.accessibilityRow}>
            <Text variant="bodySmall" style={styles.accessibilityLabel}>
              ‚ôøÔ∏è Accessibilit√© adapt√©e
            </Text>
          </View>
        )}
      </Card.Content>
    </Card>
  );
}

const styles = StyleSheet.create({
  card: {
    backgroundColor: theme.colors.card,
    borderRadius: theme.borderRadius.medium,
    borderWidth: 1.5,
    borderColor: theme.colors.border,
    padding: theme.spacing.lg,
    marginHorizontal: theme.spacing.lg,
    marginVertical: theme.spacing.sm,
  },
  locationTags: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: theme.spacing.md,
    gap: theme.spacing.sm,
  },
  tag: {
    paddingHorizontal: theme.spacing.sm,
    paddingVertical: theme.spacing.xs,
    borderRadius: theme.borderRadius.medium,
  },
  regionTag: {
    backgroundColor: theme.colors.tags.region,
  },
  departmentTag: {
    backgroundColor: theme.colors.tags.department,
  },
  moreTag: {
    backgroundColor: theme.colors.disciplines.default,
  },
  tagText: {
    ...theme.typography.caption,
    color: theme.colors.text.inverse,
  },
  name: {
    ...theme.typography.h3,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.sm,
  },
  address: {
    ...theme.typography.bodySmall,
    color: theme.colors.text.secondary,
    marginBottom: theme.spacing.xs,
    lineHeight: 20,
  },
  distance: {
    ...theme.typography.bodySmall,
    color: theme.colors.text.secondary,
    marginBottom: theme.spacing.sm,
  },
  disciplines: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: theme.spacing.sm,
    marginTop: theme.spacing.md,
  },
});

export default StructureCard;
